### **Curso de JavaScript Explicativo com Desafios**

Este curso abordar√° desde conceitos b√°sicos at√© t√≥picos intermedi√°rios de JavaScript, com desafios pr√°ticos para consolidar o aprendizado.  
**Dura√ß√£o sugerida:** 6 semanas (2-3 horas/dia).

---

### **M√≥dulo 1: Introdu√ß√£o ao JavaScript**
#### **Conte√∫do Te√≥rico**
- O que √© JavaScript? Execu√ß√£o no navegador vs. Node.js.
- Vari√°veis (`let`, `const`, `var`), tipos de dados (`string`, `number`, `boolean`, `object`).
- Fun√ß√µes b√°sicas: `console.log()`, `alert()`, `prompt()`.
- Operadores e estruturas de controle (`if`, `else`, `for`, `while`).

#### **Desafio 1: Configura√ß√£o do Ambiente**
1. Instale o [Node.js](https://nodejs.org/).
2. Use o VS Code com a extens√£o **JavaScript (ES6)**.
3. Crie um arquivo `hello.js` e execute-o via terminal:
   ```javascript
   console.log("Ol√°, Mundo!");
   ```
4. Modifique o c√≥digo para exibir seu nome e hobby:
   ```javascript
   console.log("Meu nome √© Jo√£o e adoro programar!");
   ```

---

### **M√≥dulo 2: Fun√ß√µes e Escopo**
#### **Conte√∫do Te√≥rico**
- Declara√ß√£o de fun√ß√µes (`function`, arrow functions).
- Escopo global vs. escopo de bloco (`let` vs. `var`).
- Callbacks e closures.
- Hoisting e temporiza√ß√£o.

#### **Desafio 2: Gerenciador de Tarefas**
Crie um programa que gerencie tarefas:
- Use um array para armazenar tarefas.
- Fun√ß√µes:
  - `adicionarTarefa(descricao)`: Adiciona uma tarefa.
  - `removerTarefa(indice)`: Remove uma tarefa pelo √≠ndice.
  - `listarTarefas()`: Exibe todas as tarefas.

**Exemplo:**
```javascript
adicionarTarefa("Estudar JavaScript");
adicionarTarefa("Fazer exerc√≠cios");
listarTarefas(); // ["Estudar JavaScript", "Fazer exerc√≠cios"]
```

---

### **M√≥dulo 3: Manipula√ß√£o do DOM**
#### **Conte√∫do Te√≥rico**
- Sele√ß√£o de elementos: `document.querySelector()`, `getElementById`.
- Eventos: `addEventListener`, `click`, `input`.
- Modifica√ß√£o din√¢mica de HTML/CSS via JavaScript.

#### **Desafio 3: Contador Interativo**
Crie uma p√°gina HTML com:
- Um n√∫mero exibido (inicialmente 0).
- Bot√µes "Incrementar" e "Decrementar".
- Atualize o n√∫mero conforme os bot√µes s√£o clicados.

**Exemplo de HTML:**
```html
<h1 id="contador">0</h1>
<button id="incrementar">+</button>
<button id="decrementar">-</button>
```

---

### **M√≥dulo 4: Assincronicidade e APIs**
#### **Conte√∫do Te√≥rico**
- Promises e `async/await`.
- Fetch API para requisi√ß√µes HTTP.
- Tratamento de erros com `try/catch`.
- JSON e consumo de dados externos.

#### **Desafio 4: Clima Tempo com API**
Crie uma aplica√ß√£o que busque o clima de uma cidade usando a [OpenWeather API](https://openweathermap.org/api):
1. Pe√ßa ao usu√°rio para inserir uma cidade.
2. Fa√ßa uma requisi√ß√£o √† API e exiba temperatura, descri√ß√£o e umidade.
3. Use `fetch` e manipula√ß√£o de JSON.

**Exemplo de Sa√≠da:**
```
Cidade: S√£o Paulo
Temperatura: 22¬∞C
Clima: Nublado
Umidade: 65%
```

---

### **M√≥dulo 5: ES6+ e Modern JavaScript**
#### **Conte√∫do Te√≥rico**
- Arrow functions, template strings.
- Desestrutura√ß√£o, spread/rest operator.
- Classes e m√≥dulos (`import/export`).
- LocalStorage para armazenamento local.

#### **Desafio 5: Carrinho de Compras**
Crie um sistema de carrinho de compas com:
- Adi√ß√£o/remo√ß√£o de produtos.
- C√°lculo do total.
- Persist√™ncia de dados no LocalStorage.

**Exemplo de Produto:**
```javascript
{
  id: 1,
  nome: "Camiseta",
  preco: 49.90,
  quantidade: 2
}
```

---

### **M√≥dulo 6: Projeto Final**
#### **Desafio 6: Aplica√ß√£o Full-Stack (Node.js + Frontend)**
Crie uma aplica√ß√£o de lista de tarefas completa:
1. **Backend (Node.js/Express):**
   - API com endpoints para CRUD de tarefas.
   - Use um banco de dados simples (ex: JSON ou SQLite).
2. **Frontend (HTML/CSS/JS):**
   - Interface para adicionar, editar e marcar tarefas como conclu√≠das.
   - Integra√ß√£o com a API via `fetch`.
3. **Recursos Extras:**
   - Autentica√ß√£o de usu√°rio (opcional).
   - Deploy no Heroku ou Vercel.

---

### **Recursos Adicionais**
- **Documenta√ß√£o:** [MDN Web Docs](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript), [JavaScript.info](https://javascript.info/).
- **Cursos Recomendados:**
  - [freeCodeCamp - JavaScript Algorithms and Data Structures](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/).
  - "Eloquent JavaScript" (livro gratuito online).
- **Ferramentas:**
  - **Debugging:** Chrome DevTools, `console.table()`.
  - **Pacotes:** NPM, Yarn.

---

### **Dicas para os Desafios**
- Use `console.log()` para depurar e entender o fluxo de dados.
- Pratique a imutabilidade (ex: usar `map`, `filter`, `reduce`).
- Teste edge cases (ex: entrada vazia no Desafio 4).

**Bom aprendizado!** üöÄ