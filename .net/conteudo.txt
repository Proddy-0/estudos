### **Curso de .NET Explicativo com Desafios**

Este curso abordar√° desde conceitos b√°sicos at√© t√≥picos intermedi√°rios de .NET (C# e ASP.NET Core), com desafios pr√°ticos para consolidar o aprendizado.  
**Dura√ß√£o sugerida:** 6 semanas (2-3 horas/dia).
---


### **M√≥dulo 1: Introdu√ß√£o ao .NET**
#### **Conte√∫do Te√≥rico**
- O que √© .NET? (Framework vs. .NET Core vs. .NET 5+)

- CLR (Common Language Runtime) e IL (Intermediate Language)

- Linguagens suportadas (C#, F#, VB.NET)

- Vantagens: Cross-platform, performance, open-source.


#### **Desafio 1: Configura√ß√£o do Ambiente**

1. Instale o [.NET SDK](https://dotnet.microsoft.com/download).

2. Instale o [Visual Studio](https://visualstudio.microsoft.com/) ou [VS Code](https://code.visualstudio.com/).

3. Execute no terminal:
   ```bash
   dotnet new console -o MeuPrimeiroApp
   cd MeuPrimeiroApp
   dotnet run
   ```

4. Modifique o programa para exibir "Ol√°, [seu nome]!".


---


### **M√≥dulo 2: Fundamentos de C#**
#### **Conte√∫do Te√≥rico**

- Sintaxe b√°sica: `Console.WriteLine`, vari√°veis, tipos de dados (`int`, `string`, `bool`).

- Estruturas de controle: `if`, `else`, `for`, `while`.

- M√©todos e par√¢metros.


#### **Desafio 2: Calculadora Simples**

Crie um programa que pergunte dois n√∫meros e uma opera√ß√£o (+, -, *, /) e retorne o resultado.  
**Exemplo:**
```
N√∫mero 1: 5
N√∫mero 2: 3
Opera√ß√£o: +
Resultado: 8
```

---

### **M√≥dulo 3: Orienta√ß√£o a Objetos (OOP)**
#### **Conte√∫do Te√≥rico**

- Classes e objetos.

- Heran√ßa, encapsulamento, polimorfismo.

- Propriedades, construtores.


#### **Desafio 3: Sistema de Biblioteca**


Crie uma classe `Livro` com propriedades `Titulo`, `Autor` e `AnoPublicacao`.  
- Crie uma classe `Biblioteca` que armazene livros em uma lista.

- Adicione m√©todos para `AdicionarLivro`, `RemoverLivro` e `ListarLivros`.

**Exemplo de uso:**

```csharp
var livro1 = new Livro("1984", "George Orwell", 1949);
var biblioteca = new Biblioteca();
biblioteca.AdicionarLivro(livro1);
biblioteca.ListarLivros(); // Exibe todos os livros
```

---

### **M√≥dulo 4: ASP.NET Core (Web API)**
#### **Conte√∫do Te√≥rico**

- Introdu√ß√£o a APIs REST.

- Configura√ß√£o de um projeto ASP.NET Core.

- Rotas, controladores (Controllers), e m√©todos HTTP (GET, POST).

#### **Desafio 4: API de Tarefas**
Crie uma API para gerenciar tarefas:

1. Crie um modelo `Tarefa` com `Id`, `Descricao` e `Concluida`.


2. Crie um controller `TarefasController` com endpoints:

   - `GET /tarefas`: Retorna todas as tarefas.

   - `POST /tarefas`: Cria uma nova tarefa.

   - `PUT /tarefas/{id}`: Marca uma tarefa como conclu√≠da.

**Dica:** Use uma lista em mem√≥ria para armazenar as tarefas.

---

### **M√≥dulo 5: Entity Framework Core (Banco de Dados)**
#### **Conte√∫do Te√≥rico**

- ORM (Mapeamento Objeto-Relacional).

- Configura√ß√£o do DbContext.

- Migra√ß√µes e CRUD.



#### **Desafio 5: Sistema de Usu√°rios**

1. Crie uma classe `Usuario` com `Id`, `Nome`, `Email`.

2. Configure um `DbContext` e use o SQLite como banco de dados.

3. Implemente opera√ß√µes:
   - Adicionar usu√°rio.

   - Buscar usu√°rio por email.

   - Listar todos os usu√°rios.

---

### **M√≥dulo 6: Projeto Final**
#### **Desafio 6: Aplica√ß√£o Completa**

Crie um sistema de e-commerce simples com:
1. **Frontend:** Interface web (HTML/CSS/JavaScript ou Blazor).

2. **Backend:** API ASP.NET Core com endpoints para produtos e pedidos.

3. **Banco de Dados:** Entity Framework Core (SQL Server ou SQLite).

4. **Requisitos:**
   - Cadastro de produtos (Nome, Pre√ßo, Estoque).

   - Cadastro de pedidos (Cliente, Produtos, Total).

   - Atualiza√ß√£o de estoque ap√≥s um pedido.


---

### **Recursos Adicionais**
- **Documenta√ß√£o Oficial:** [Microsoft Learn .NET](https://learn.microsoft.com/pt-br/dotnet/)

- **Cursos Recomendados:** 

  - "C# Fundamentals" no Pluralsight.

  - "ASP.NET Core for Beginners" no YouTube.

- **Comunidade:** Stack Overflow, GitHub, f√≥runs da Microsoft.

---

### **Dicas para os Desafios**
- Sempre teste seu c√≥digo com casos extremos (ex: divis√£o por zero no Desafio 2).

- Use o debugger do Visual Studio para identificar erros.

- Pratique a leitura de documenta√ß√£o oficial.

**Bom aprendizado!** üöÄ