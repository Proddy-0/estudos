### **Curso de Python Explicativo com Desafios**

Este curso abordar√° desde conceitos b√°sicos at√© t√≥picos intermedi√°rios de Python, com desafios pr√°ticos para consolidar o aprendizado.  
**Dura√ß√£o sugerida:** 6 semanas (2-3 horas/dia).

---

### **M√≥dulo 1: Introdu√ß√£o ao Python**
#### **Conte√∫do Te√≥rico**
- O que √© Python? Vantagens: sintaxe simples, versatilidade (web, dados, automa√ß√£o).
- Instala√ß√£o do Python e configura√ß√£o do ambiente (VS Code, PyCharm, Jupyter).
- Tipos de dados: `int`, `float`, `str`, `bool`, `list`, `dict`.
- Operadores b√°sicos e entrada/sa√≠da (`print()`, `input()`).

#### **Desafio 1: Conversor de Temperatura**
Crie um programa que converta Celsius para Fahrenheit.  
**F√≥rmula:** `F = (C * 9/5) + 32`.  
**Exemplo:**
```python
celsius = float(input("Temperatura em Celsius: "))
fahrenheit = (celsius * 9/5) + 32
print(f"{celsius}¬∞C equivalem a {fahrenheit}¬∞F")
```

---

### **M√≥dulo 2: Estruturas de Controle e Fun√ß√µes**
#### **Conte√∫do Te√≥rico**
- Condicionais: `if`, `elif`, `else`.
- Loops: `for`, `while`, `break`, `continue`.
- Fun√ß√µes: defini√ß√£o, par√¢metros, retorno, escopo de vari√°veis.

#### **Desafio 2: Jogo da Adivinha√ß√£o**
Crie um jogo onde o usu√°rio tenta adivinhar um n√∫mero entre 1 e 100.  
- O programa informa se o palpite √© maior ou menor que o n√∫mero secreto.
- Use `random.randint(1, 100)` para gerar o n√∫mero aleat√≥rio.
- Limite a 10 tentativas.

**Exemplo:**
```
Tentativa 1: 50
Dica: O n√∫mero √© menor!
Tentativa 2: 25
Dica: O n√∫mero √© maior!
```

---

### **M√≥dulo 3: Orienta√ß√£o a Objetos (OOP)**
#### **Conte√∫do Te√≥rico**
- Classes e objetos: atributos, m√©todos, construtor (`__init__`).
- Heran√ßa, polimorfismo, encapsulamento.
- M√©todos especiais: `__str__`, `__repr__`.

#### **Desafio 3: Sistema de Banco**
Crie classes para modelar um sistema banc√°rio:
- Classe `ContaBancaria` com `numero`, `titular`, `saldo`.
- M√©todos: `depositar(valor)`, `sacar(valor)`, `exibir_saldo()`.
- Classe `ContaPoupanca` que herda de `ContaBancaria` e adiciona `taxa_rendimento`.

**Exemplo de uso:**
```python
conta = ContaPoupanca("123", "Maria", 1000, 0.05)
conta.depositar(500)
conta.sacar(200)
print(conta.exibir_saldo())  # Sa√≠da: Saldo: R$1300.00
```

---

### **M√≥dulo 4: Manipula√ß√£o de Arquivos e Exce√ß√µes**
#### **Conte√∫do Te√≥rico**
- Leitura/escrita de arquivos: `open()`, `read()`, `write()`, `with`.
- Tratamento de exce√ß√µes: `try`, `except`, `finally`.
- M√≥dulos √∫teis: `os`, `json`.

#### **Desafio 4: Agenda de Contatos**
Crie uma agenda que:
- Armazene contatos (nome, telefone, email) em um arquivo CSV ou JSON.
- Permita adicionar, buscar e listar contatos.
- Use exce√ß√µes para lidar com arquivos inexistentes ou dados inv√°lidos.

**Exemplo de arquivo JSON:**
```json
[
  {"nome": "Ana", "telefone": "11-99999-9999", "email": "ana@email.com"}
]
```

---

### **M√≥dulo 5: Introdu√ß√£o a APIs e Web (Flask)**
#### **Conte√∫do Te√≥rico**
- Cria√ß√£o de APIs REST com Flask.
- Rotas, m√©todos HTTP (GET, POST), e retorno de JSON.
- Uso de `requests` para consumir APIs externas.

#### **Desafio 5: API de Tarefas**
Crie uma API simples com Flask:
- Endpoints:
  - `GET /tarefas`: Lista todas as tarefas.
  - `POST /tarefas`: Adiciona uma nova tarefa (descri√ß√£o e status).
  - `PUT /tarefas/<id>`: Atualiza o status de uma tarefa.
- Use uma lista em mem√≥ria ou um arquivo JSON para persist√™ncia.

**Exemplo de resposta:**
```python
from flask import Flask, jsonify, request
app = Flask(__name__)

tarefas = [
    {"id": 1, "descricao": "Estudar Python", "concluida": False}
]

@app.route('/tarefas', methods=['GET'])
def listar_tarefas():
    return jsonify(tarefas)
```

---

### **M√≥dulo 6: Projeto Final**
#### **Desafio 6: Sistema de Gerenciamento de Biblioteca**
Crie um sistema completo com:
1. **Backend (Flask):**
   - API para cadastrar livros, clientes e empr√©stimos.
   - Use SQLite ou SQLAlchemy para o banco de dados.
2. **Frontend (HTML/CSS/JS ou CLI):**
   - Interface para adicionar livros, registrar empr√©stimos e consultar disponibilidade.
3. **Funcionalidades:**
   - Valida√ß√£o de dados (ex: livro j√° emprestado).
   - Relat√≥rio de livros mais populares.

**Modelo do banco de dados:**
```python
class Livro(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    titulo = db.Column(db.String(100))
    autor = db.Column(db.String(50))
```

---

### **Recursos Adicionais**
- **Documenta√ß√£o:** [Python Official Docs](https://docs.python.org/pt-br/3/), [Flask Documentation](https://flask.palletsprojects.com/).
- **Livros Recomendados:**
  - *"Python Crash Course"* (Eric Matthes).
  - *"Automate the Boring Stuff with Python"* (Al Sweigart).
- **Ferramentas:**
  - **Ambiente Virtual:** `venv`, `pipenv`.
  - **Pacotes √öteis:** `pandas` (dados), `requests` (APIs), `selenium` (automa√ß√£o).

---

### **Dicas para os Desafios**
- Use list comprehensions e fun√ß√µes como `map()`/`filter()` para c√≥digo mais limpo.
- Pratique a formata√ß√£o de strings com f-strings (ex: `f"Saldo: R${saldo:.2f}"`).
- Escreva testes simples com `assert` ou `pytest` (opcional).

**Bom aprendizado!** üöÄ