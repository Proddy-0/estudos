### **Curso de C++ Explicativo com Desafios**

Este curso abordar√° desde conceitos b√°sicos at√© t√≥picos intermedi√°rios de C++, com desafios pr√°ticos para consolidar o aprendizado.  
**Dura√ß√£o sugerida:** 6 semanas (2-3 horas/dia).

---

### **M√≥dulo 1: Introdu√ß√£o ao C++**
#### **Conte√∫do Te√≥rico**

- O que √© C++? Hist√≥ria e diferen√ßas para C.

- Caracter√≠sticas: Performance, orienta√ß√£o a objetos, baixo n√≠vel vs. alto n√≠vel.

- Compiladores: GCC, Clang, MSVC.

- Ferramentas: IDE (Code::Blocks, Visual Studio, VS Code) ou editores de texto.


#### **Desafio 1: Configura√ß√£o do Ambiente**
1. Instale um compilador (ex: [MinGW](https://www.mingw-w64.org/) para Windows ou `g++` no Linux).

2. Configure o VS Code com extens√£o C++ ou use uma IDE como Code::Blocks.

3. Crie um programa que imprima `"Ol√°, Mundo!"`.

4. Modifique o programa para exibir seu nome e idade usando `std::cout`.

**Exemplo:**
```cpp
#include <iostream>

int main() {
    std::cout << "Ol√°, Maria! Voc√™ tem 25 anos.\n";
    return 0;
}
```

---

### **M√≥dulo 2: Fundamentos de C++**
#### **Conte√∫do Te√≥rico**

- Sintaxe b√°sica: `std::cout`, `std::cin`, vari√°veis (`int`, `float`, `string` via `<string>`).

- Estruturas de controle: `if`, `else`, `switch`, `for`, `while`.

- Fun√ß√µes e passagem de par√¢metros (por valor e por refer√™ncia).


#### **Desafio 2: Calculadora de IMC**

Crie um programa que calcule o √çndice de Massa Corporal (IMC) com base no peso e altura inseridos pelo usu√°rio.
F√≥rmula: `IMC = peso / (altura * altura)`.  
Classifica√ß√£o:
- Abaixo de 18.5: Magreza
- 18.5‚Äì24.9: Saud√°vel
- 25.0‚Äì29.9: Sobrepeso
- Acima de 30.0: Obesidade

**Exemplo de Sa√≠da:**
```
Peso (kg): 70
Altura (m): 1.75
Seu IMC √© 22.86 (Saud√°vel).
```

---

### **M√≥dulo 3: Orienta√ß√£o a Objetos (OOP)**

#### **Conte√∫do Te√≥rico**
- Classes e objetos: membros p√∫blicos/privados, m√©todos, construtores/destrutores.

- Heran√ßa, polimorfismo, encapsulamento.

- Ponteiros e gerenciamento de mem√≥ria (new/delete).


#### **Desafio 3: Sistema de Ve√≠culos**
Crie uma hierarquia de classes:

- Classe base `Veiculo` com propriedades: `marca`, `ano`, `preco`.

- Classes derivadas: `Carro` (n√∫mero de portas) e `Moto` (cilindradas).

- Crie um vetor de ve√≠culos e exiba suas informa√ß√µes usando polimorfismo.

**Exemplo:**
```cpp
Carro carro("Toyota", 2020, 80000, 4);
Moto moto("Honda", 2019, 15000, 300);

// Sa√≠da:
// Toyota (2020) - Pre√ßo: R$80000 - Portas: 4
// Honda (2019) - Pre√ßo: R$15000 - Cilindradas: 300
```

---

### **M√≥dulo 4: Estruturas de Dados e Ponteiros**
#### **Conte√∫do Te√≥rico**

- Arrays vs. vetores (`std::vector`).

- Ponteiros, refer√™ncias e aloca√ß√£o din√¢mica.

- Estruturas de dados simples: listas encadeadas, pilhas.


#### **Desafio 4: Gerenciador de Tarefas com Lista Encadeada**
Implemente uma lista encadeada para armazenar tarefas com:

- Descri√ß√£o da tarefa.

- Status (conclu√≠da/pendente).

- Funcionalidades: adicionar, remover, marcar como conclu√≠da, listar todas.

**Dica:** Use uma estrutura `struct No { string descricao; bool concluida; No* proximo; };`.

---

### **M√≥dulo 5: Manipula√ß√£o de Arquivos e Exce√ß√µes**
#### **Conte√∫do Te√≥rico**

- Leitura/escrita de arquivos com `<fstream>`.

- Tratamento de exce√ß√µes (`try`, `catch`, `throw`).

- Namespaces e organiza√ß√£o de c√≥digo.


#### **Desafio 5: Agenda de Contatos**
Crie um programa que gerencie contatos (nome, telefone, email) salvos em um arquivo `.txt`.

Funcionalidades:
- Adicionar contato.
- Buscar contato por nome.
- Carregar e salvar dados em arquivo.

**Exemplo de arquivo:**
```
Maria; (11) 99999-9999; maria@email.com
Jo√£o; (21) 88888-8888; joao@email.com
```

---

### **M√≥dulo 6: Projeto Final**
#### **Desafio 6: Jogo de Texto em C++**
Crie um jogo de aventura baseado em texto com:

1. **Sistema de Personagem:** Nome, sa√∫de, invent√°rio.

2. **Mapa:** Navega√ß√£o entre salas (ex: floresta, caverna).

3. **Combate:** Inimigos com sa√∫de e dano.

4. **Salvamento:** Progresso salvo em arquivo bin√°rio.


**Exemplo de Mec√¢nica:**
```
Voc√™ est√° na floresta. O que faz?
1. Atacar o lobo

2. Fugir para a caverna

3. Usar po√ß√£o de cura

```

---

### **Recursos Adicionais**
- **Documenta√ß√£o:** [C++ Reference](https://en.cppreference.com/), [LearnCPP](https://www.learncpp.com/).

- **Livros Recomendados:**
  - *"A Linguagem de Programa√ß√£o C++"* (Bjarne Stroustrup).
  - *"Effective Modern C++"* (Scott Meyers).
  
- **Comunidade:** Stack Overflow, Reddit (r/cpp), f√≥runs de desenvolvimento.

---

### **Dicas para os Desafios**
- Use `Valgrind` ou ferramentas de debug para detectar vazamentos de mem√≥ria.
- Pratique a sintaxe moderna (C++11/17/20): `auto`, smart pointers (`std::unique_ptr`), loops baseados em intervalo.
- Teste casos extremos (ex: arquivo inexistente no Desafio 5).

**Bom aprendizado!** üöÄ